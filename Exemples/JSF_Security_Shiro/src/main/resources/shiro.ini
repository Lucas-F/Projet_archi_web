# =======================
# Shiro INI configuration
# =======================

[main]
# Objects and their properties are defined here, 
# Such as the securityManager, Realms and anything
# else needed to build the SecurityManager
authc.loginUrl =    /login.xhtml

# jdbc realm for form and authorization
jdbcRealm= org.apache.shiro.realm.jdbc.JdbcRealm
jdbcRealm.permissionsLookupEnabled = true

ds = org.apache.derby.jdbc.ClientDataSource
ds.serverName = localhost
ds.user = app
ds.password = app
ds.databaseName = sample
jdbcRealm.dataSource = $ds

# If not filled, subclasses of JdbcRealm assume "select password from users where username = ?"
# first result column is password, second result column is salt
jdbcRealm.authenticationQuery = select password from users where username = ?

# If not filled, subclasses of JdbcRealm assume "select role_name from user_roles where username = ?"
jdbcRealm.userRolesQuery = select role_name from user_roles where username = ?

# If not filled, subclasses of JdbcRealm assume "select permission from roles_permissions where role_name = ?"
jdbcRealm.permissionsQuery = select permission from roles_permissions where role_name = ?

# password hashing specification
# sha256Matcher = org.apache.shiro.authc.credential.HashedCredentialsMatcher
# sha256Matcher.hashAlgorithmName=SHA-256
# jdbcRealm.credentialsMatcher = $sha256Matcher

# cacheManager = org.apache.shiro.cache.ehcache.EhCacheManager
# securityManager.cacheManager = $cacheManager
# securityManager.sessionManager.globalSessionTimeout = 1800000

#[users]
# The 'users' section is for simple deployments
# when you only need a small number of statically-defined 
# set of User accounts.
# format: username = password, role1, role2, ..., roleN
#root = secret,admin
#guest = guest,guest
#presidentskroob = 12345,president
#darkhelmet = ludicrousspeed,darklord,schwartz
#lonestarr = vespa,goodguy,schwartz

#[roles]
# The 'roles' section is for simple deployments
# when you only need a small number of statically-defined
# roles.
# format; roleName = permission1, permission2, ..., permissionN
#admin = *
#schwartz = lightsaber:*
#goodguy = winnebago:drive:eagle5

[urls]
# The 'urls' section is used for url-based security
# in web applications.  We'll discuss this section in the
# Web documentation

# The /login.jsp is not restricted to authenticated users (otherwise no one could log in!), but
# the 'authc' filter must still be specified for it so it can process that url's
# login submissions. It is 'smart' enough to allow those requests through as specified by the
/login.xhtml = authc

/private/** = authc
/** = anon

#/remoting/** = authc, roles[b2bClient], perms["remote:invoke:lan,wan"]


